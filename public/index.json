[{"content":"this article assumes you have some basic knowledge about Rust smart pointers.\nthe dereference (*) operator dereference operator * is used for getting the actual value from a reference:\n1 2 3 let a: i32 = 5; let b: \u0026amp;i32 = \u0026amp;a; assert_eq!(*b, 5); in the above example, b is a reference to a, *b will return the value that b pointing to.\nthe smart pointers Box\u0026lt;T\u0026gt; here is an example of how you can init and modify the value of a Box:\n1 2 3 let mut b: Box\u0026lt;i32\u0026gt; = Box::new(6); *b = 7; assert_eq!(*b, 7); in the above example, I init a box with value 6 inside, then I changed the value to 7, and check the value inside the box with assert to ensure the change is affected.\nin the first example of this post, we apply the dereference to a reference which is \u0026amp;i32, but the data type of b now is Box\u0026lt;i32\u0026gt;, how can we apply to dereference to a Box\u0026lt;i32\u0026gt;?\nthe answer is the Box\u0026lt;T\u0026gt; is implemented the trait Deref and DerefMut, so when you write *b, the compiler implicitly translates it to *(b.deref()) if you want to get the value or *(b.deref_mut()) if you want to change the value.\nif you have a Box\u0026lt;T\u0026gt;, the deref method returns a \u0026amp;T, and deref_mut returns a \u0026amp;mut T. after calling the deref method, you now have a reference to the actual value, therefore you can use the dereference operator on these references.\nthe above snippet can be explicitly rewritten as below:\n1 2 3 4 5 6 7 let mut b: Box\u0026lt;i32\u0026gt; = Box::new(6); let c: \u0026amp;mut i32 = b.deref_mut(); *c = 7; let d: \u0026amp;i32 = b.deref(); assert_eq!(*d, 7); firstly, we create a new box to hold the value 6. then we call deref_mut to get a \u0026amp;mut i32, in order to change the value inside the box. finally, we get a read-only reference \u0026amp;i32 to the value inside the box, by calling deref.\nRc\u0026lt;T\u0026gt; Rc\u0026lt;T\u0026gt; is quite similar to Box\u0026lt;T\u0026gt;, except that you can only read data in Rc, you cannot edit it. because Rc only implements the trait Deref, not implement DerefMut. Therefore, you can only call the deref method on Rc only, there is no such method deref_mut.\n1 2 3 4 5 6 // implicitly let rc1 = Rc::new(3); assert_eq!(*rc1, 3); // explicitly let a = rc1.deref(); assert_eq!(*a, 3); RefCell\u0026lt;T\u0026gt; 1 2 3 4 // wrong code let ref_cell: RefCell\u0026lt;i32\u0026gt; = RefCell::new(5); *ref_cell = 7; assert_eq!(*ref_cell, 7); if you write code like the above example, you will get this error: type RefCell\u0026lt;{integer}\u0026gt; cannot be dereferenced. it’s because RefCell\u0026lt;i32\u0026gt; doesn’t implement either Deref or DerefMut traits. you can check this out on the docs of RefCell.\nthe way RefCell\u0026lt;T\u0026gt; works is a bit different from Box\u0026lt;T\u0026gt;, to read or modify data inside RefCell you need to explicitly call method borrow or borrow_mut respectively.\nborrow will return a Ref\u0026lt;T\u0026gt; which implements trait Deref, and borrow_mut will return a RefMut\u0026lt;T\u0026gt; which implements both DerefMut and Deref.\nbecause Ref\u0026lt;T\u0026gt; and RefMut\u0026lt;T\u0026gt; implements Deref, so we can use dereference operator on them.\nso you can write code like this:\n1 2 3 4 5 6 7 8 9 // implicit let ref_cell = RefCell::new(5); *(ref_cell.borrow_mut()) = 7; assert_eq!(*(ref_cell.borrow()), 7); // a bit explicit let ref_cell = RefCell::new(5); *(ref_cell.borrow_mut().deref_mut()) = 7; assert_eq!(*(ref_cell.borrow().deref()), 7); or, if you want more explicitly, I have this code:\n1 2 3 4 5 6 7 8 9 10 // wrong code let ref_cell = RefCell::new(5); let mut a: RefMut\u0026lt;i32\u0026gt; = ref_cell.borrow_mut(); let b: \u0026amp;mut i32 = a.deref_mut(); *b = 8; let a: Ref\u0026lt;i32\u0026gt; = ref_cell.borrow(); let b: \u0026amp;i32 = a.deref(); assert_eq!(*b, 8); if you run the above code, you will get this error: already mutably borrowed: BorrowError.\nit’s because, in line number 2, you call borrow_mut, and in line number 3 you call deref_mut to get a mutability reference.\nin line number 5, you call borrow in order to read the data inside RefCell, which is forbidden by Rust. you can’t have a read-only reference to the value that currently has a mutability reference to prevent the race condition. so you can rewrite it as below:\n1 2 3 4 5 6 7 8 9 10 11 12 let ref_cell = RefCell::new(5); { let mut a: RefMut\u0026lt;i32\u0026gt; = ref_cell.borrow_mut(); let b: \u0026amp;mut i32 = a.deref_mut(); *b = 8; } // borrow_mut will be drop here, at the end of block { // there are no mutability reference to the value, so we can borrow. let a: Ref\u0026lt;i32\u0026gt; = ref_cell.borrow(); let b: \u0026amp;i32 = a.deref(); assert_eq!(*b, 8); } in the above code, the borrow_mut and deref_mut are put in the first block, so at the end of the first block, the mutability reference is dropped, there is no mutability reference to the value now. that is why in the second block, you can (read-only) borrow as much as you want from the RefCell.\nreferences https://doc.rust-lang.org/book/ch15-00-smart-pointers.html\n","permalink":"http://localhost:1313/posts/a-note-about-rust-smart-pointer-and-deref/","summary":"\u003cp\u003ethis article assumes you have some basic knowledge about \u003ca href=\"https://doc.rust-lang.org/book/ch15-00-smart-pointers.html\"\u003eRust smart pointers\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-dereference--operator\"\u003ethe dereference (*) operator\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003edereference\u003c/em\u003e operator \u003ccode\u003e*\u003c/code\u003e is used for getting the actual value from a reference:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e3\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e: \u003cspan class=\"kt\"\u003ei32\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e: \u003cspan class=\"kp\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"kt\"\u003ei32\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"fm\"\u003eassert_eq!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003ein the above example, \u003ccode\u003eb\u003c/code\u003e is a reference to \u003ccode\u003ea\u003c/code\u003e, \u003ccode\u003e*b\u003c/code\u003e will return the value that \u003ccode\u003eb\u003c/code\u003e pointing to.\u003c/p\u003e\n\u003ch2 id=\"the-smart-pointers\"\u003ethe smart pointers\u003c/h2\u003e\n\u003ch3 id=\"boxt\"\u003e\u003ccode\u003eBox\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003ehere is an example of how you can init and modify the value of a Box\u003c!-- raw HTML omitted --\u003e:\u003c/p\u003e","title":"A Note About Rust Smart Pointer and Deref"},{"content":"","permalink":"http://localhost:1313/posts/postgres-collation/","summary":"","title":"Postgres Collation"},{"content":" a linked list If we use two pointers slow and fast, the first one moves forward one step at a time, and the second one moves forward two steps at a time. Eventually, the two pointers will meet somewhere. In the above example, they meet at number 9 (or G).\nG is where two-pointers fast and slow meet.\nE is the entrance of the loop.\nS is the first node of the linked list.\nF is the distance from the chain’s beginning to the loop’s entrance (from S to E). (eg: 1 – 3 – 5)\na is the distance from the loop’s entrance to the point where two pointers meet (from E to G). (eg: 5 – 6 – 7 – 8 – 9)\nC is the length of the loop. (eg: the loop is 5 – 6 – 7 – 8 – 9 – 10, the length is 6 )\nThe total distance that the slow pointer has moved is $F + a + xC$. $x$ is the number of times the slow pointer completes the loop.\nThe total distance that the fast pointer has moved is $F + a + yC$. Likewise, $y$ is the number of times the fast pointer completes the loop.\nSince the fast pointer moves two steps at a time, its distance will be double the slow pointer’s distance.\n\\[2*(F + a + xC) = F + a + yC\\] \\[2F + 2a + 2xC = F + a + yC\\] \\[F + a + 2xC = yC\\] \\[F + a = yC – 2xC\\] \\[F + a = (y – 2x)C\\] Denote $n = y – 2x, n \\ge 0$ \\[F + a = nC\\] $nC$ means to complete the loop (length is C) n times\nIn other words, if we have two pointers a and b, a starts at beginning of the chain (node S), b starts at where slow and fast pointers meet (node G), and both two new pointers move one step at a time. The first pointer moves a distance equal to $F + a$, and the second pointer moves a distance equal to $nC$, they will meet at G.\n\\[F + a= (n – 1)C + C\\] \\[F + a= (n – 1)C + (C – a) + a\\] \\[F = (n – 1)C + (C – a)\\]\nThis means, that if pointer a starts from the beginning of the chain (node S), pointer b starts from where two pointers slow and fast meet (node G). They eventually meet at node E, the entrance of the loop. Leetcode: 287. Find the Duplicate Number ","permalink":"http://localhost:1313/posts/floyd-cycle-detection/","summary":"\u003cp\u003e\n  \u003cfigure\u003e\n    \u003cimg src=\"linked-list.png\" alt=\"\"\u003e\n    \u003cfigcaption\u003ea linked list\u003c/figcaption\u003e\n  \u003c/figure\u003e\n\nIf we use two pointers \u003ccode\u003eslow\u003c/code\u003e and \u003ccode\u003efast\u003c/code\u003e, the first one moves forward one step at a time, and the second one moves forward two steps at a time. Eventually, the two pointers will meet somewhere. In the above example, they meet at number 9 (or \u003ccode\u003eG\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eG\u003c/code\u003e is where two-pointers fast and slow meet.\u003cbr\u003e\n\u003ccode\u003eE\u003c/code\u003e is the entrance of the loop.\u003cbr\u003e\n\u003ccode\u003eS\u003c/code\u003e is the first node of the linked list.\u003cbr\u003e\n\u003ccode\u003eF\u003c/code\u003e is the distance from the chain’s beginning to the loop’s entrance (from \u003ccode\u003eS\u003c/code\u003e to \u003ccode\u003eE\u003c/code\u003e). (eg: 1 – 3 – 5)\u003cbr\u003e\n\u003ccode\u003ea\u003c/code\u003e is the distance from the loop’s entrance to the point where two pointers meet (from \u003ccode\u003eE\u003c/code\u003e to \u003ccode\u003eG\u003c/code\u003e). (eg: 5 – 6 – 7 – 8 – 9)\u003cbr\u003e\n\u003ccode\u003eC\u003c/code\u003e is the length of the loop. (eg: the loop is 5 – 6 – 7 – 8 – 9 – 10, the length is 6 )\u003cbr\u003e\nThe total distance that the \u003ccode\u003eslow pointer\u003c/code\u003e has moved is $F + a + xC$. $x$ is the number of times the slow pointer completes the loop.\u003cbr\u003e\nThe total distance that the \u003ccode\u003efast pointer\u003c/code\u003e has moved is $F + a + yC$. Likewise, $y$ is the number of times the fast pointer completes the loop.\u003c/p\u003e","title":"Floyd’s cycle detection"},{"content":"1. Definition set is a collection of unique elements. the word disjoin means non-overlapping – two sets are considered as disjoining if they have no element in common disjoin-set contains a collection of non-overlapping sets it has two method find(x): return the representative element of the set that contains of x if u and v are in the same set, find(u) = find(v) union(u, v): merge two sets that contain u and v after merging, find(v) = find(u) 2. Implementations View the visualization of the data structure here.\ntree is a connected graph with no cycles forest is a graph with each connected-component as a tree A tree and a forest Disjoin-Set is usually implemented as a forest.\nThe below visualizations are taken from here.\n2.0 Rank Each node will have a corresponding rank number to represent the depth from this node.\n2.1 Make Set create a forest that has 15 trees (set) Initially, we create a forest that has n set, each set has just one element.\nFor example, in the above image, we created a forest with 15 sets, each with just one element.\nEach node now will have the same rank: 0\n2.2 Find Initially, find(1) = 1, find(2) = 2,…\nBecause in this implementation, find will return the root of the tree representing a set, at first each set has just one element.\n2.3 Union Algorithm of union(u, v):\nroot1 = find(u), root2 = find(v) if root1.rank \u0026lt; root2.rank: hang root1 under root2: root1.parent = root2 if root2.rank \u0026lt; root1.rank: hang root2 under root1: root2.parent = root1 if root2.rank == root1.rank: root1.parent = root2 (or root2.parent = root1) root1.rank += 1 (root2.rank += 1) union(0,1) At first, ranks[0] = ranks[1] = 0 , they have same rank, so we can hang 0 under 1 or 1 under 0, both ways are fine. merge 0 and 1 after merging: find(0) = find(1) = 1. ranks[0] = 0, ranks[1] = 0 + 1.\nunion(2,0) find(2) = 2, find(0) = 1. ranks[1] = 1, ranks[2] = 0. rank of 2 is smaller than rank of 1, we will hang 2 under 1. merge 2 and 0 After merging: find(0) = find(2) = find(1) = 1. ranks[0] = ranks[2] = 0, ranks[1] = 1.\nunion(3,4) find(3) = 3, find(4) = 4. ranks[3] = 0, ranks[4] = 0. we can hang 3 under 4 or 4 under 3, both ways are fine. merge 3 and 4 after merging, find(3) = find(4) = 4. rank(3) = 0, rank(4) = 0 + 1.\nunion(2,3) find(2) = 1, find(3) = 4. ranks[1] = 1, ranks[4] = 1. we can either hang 4 under 1 or 1 under 4. union(2,3) after merging, find(0) = find(2) = find(3) = 0, find(4) = 1, find(1) = 1 + 1.\nThis is an implementation in go.\n3. Minimum spanning tree A minimum spanning tree (MST) or minimum weight spanning tree is a subset of the edges of a connected, edge-weighted undirected graph that connects all the vertices together, without any cycles and with the minimum possible total edge weight.[1] That is, it is a spanning tree whose sum of edge weights is as small as possible.[2] More generally, any edge-weighted undirected graph (not necessarily connected) has a minimum spanning forest, which is a union of the minimum spanning trees for its connected components.\n-Wikipedia\nMST For example, if we want to find MST of the graph on the above image, here is the algorithm:\nn is the number of edges, and v is the number of nodes. Init a Disjoin set with v sets corresponding with v nodes of the graph. In other words, if we have 10 nodes, we will have 10 sets in the Disjoin set. Our target is to merge these v sets into just one single set representing that all nodes are connected. Sort the edges in the graph in accessing order of weight. You probably can use a priority queue for this purpose, so you can always get the shortest edge first, and then the longer ones. iterates through every edge in the priority queue: call e1 and e2 are two nodes that make up the edge if find(e1) == find(e2), it means both node e1 and node e2 are connected already, so we won’t need this edge skips this edge if find(e1) != find(e2), e1 and e2 now are in the different set, in other words, they are not connected. union(e1, e2) we can early stop the algorithm by checking if all v nodes are connected. Here is a similar issue that can be solved using Disjoin set: https://leetcode.com/problems/min-cost-to-connect-all-points/ https://github.com/khanh1998/Gen-5/blob/main/Homework/quoc_khanh/lesson_15/1584.MinCosttoConnectAllPoints.py\n4. References https://en.wikipedia.org/wiki/Disjoint-set_data_structure https://www.cs.usfca.edu/~galles/visualization/DisjointSets.html https://courses.cit.cornell.edu/info2950_2012sp/graphs3.pdf\n","permalink":"http://localhost:1313/posts/disjoin-set-union-find/","summary":"\u003ch2 id=\"1-definition\"\u003e1. Definition\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eset\u003c/em\u003e is a collection of unique elements.\nthe word \u003cem\u003edisjoin\u003c/em\u003e means \u003cem\u003enon-overlapping\u003c/em\u003e – two sets are considered as disjoining if they have no element in common\u003c/li\u003e\n\u003cli\u003e\u003cem\u003edisjoin-set\u003c/em\u003e contains a collection of \u003cem\u003enon-overlapping\u003c/em\u003e sets\u003c/li\u003e\n\u003cli\u003eit has two method\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efind(x)\u003c/code\u003e: return the \u003cstrong\u003erepresentative element\u003c/strong\u003e of the set that contains of x\n\u003cul\u003e\n\u003cli\u003eif u and v are in the same set, find(u) = find(v)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eunion(u, v)\u003c/code\u003e: merge two sets that contain u and v\n\u003cul\u003e\n\u003cli\u003eafter merging, find(v) = find(u)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-implementations\"\u003e2. Implementations\u003c/h2\u003e\n\u003cp\u003eView the visualization of the data structure here.\u003c/p\u003e","title":"Disjoin-Set/Union-Find notes"},{"content":"Explain Explaining the query will help you to estimate how expensive your query is and which query plan will be used.\n1 2 3 4 5 6 khanh=# explain select g from grades where g = 100; QUERY PLAN ------------------------------------------------------------------------------- Index Only Scan using g_index on grades (cost=0.42..97.55 rows=4636 width=4) Index Cond: (g = 100) (2 rows) So, this query will use Index-Only-Scan. The cost of the query is ranging from 0.42 to 97.55, 4636 is number of estimated return rows, width is size of return data in byte.\nExplain Analyze Explain analyze will both estimate the complexity of your query and execute the query to get the actual result.\n1 2 3 4 5 6 7 8 9 khanh=# explain analyze select g from grades where g = 100; QUERY PLAN ----------------------------------------------------------------------------------------------------------------------------- Index Only Scan using g_index on grades (cost=0.42..97.55 rows=4636 width=4) (actual time=0.117..49.535 rows=5006 loops=1) Index Cond: (g = 100) Heap Fetches: 0 Planning Time: 0.280 ms Execution Time: 95.587 ms (5 rows) The total time is sum of planning time and execution time: 0.280 + 95.587 ms. The actual number of return rows is 5006 instead of 4636 as estimation. The actual cost is also cheaper than the estimated cost.\nPrepare data We need to prepare some data to compare the speed of like and =.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 CREATE TABLE grades (id serial PRIMARY KEY, g int, name text); CREATE INDEX g_index ON grades(g); INSERT INTO grades (g, name) SELECT random()*100, substring(md5(random()::text), 0, floor(random()*31)::int) FROM generate_series(0, 1000000); VACUUM (ANALYZE, VERBOSE, FULL); We will create a table with only two columns, and insert 1 million random rows into that table.\nComparing on non-index column First, I want to test = operator on column name:\n1 2 3 4 5 6 7 8 9 10 11 12 khanh=# explain analyze select * from grades where name = \u0026#39;00d4e4727e671\u0026#39;; QUERY PLAN ---------------------------------------------------------------------------------------------------------------------- Gather (cost=1000.00..12946.94 rows=6 width=23) (actual time=45.986..47.617 rows=1 loops=1) Workers Planned: 2 Workers Launched: 2 -\u0026gt; Parallel Seq Scan on grades (cost=0.00..11946.34 rows=2 width=23) (actual time=31.551..31.573 rows=0 loops=3) Filter: (name = \u0026#39;00d4e4727e671\u0026#39;::text) Rows Removed by Filter: 333333 Planning Time: 0.112 ms Execution Time: 47.783 ms (8 rows) This query we use like:\n1 2 3 4 5 6 7 8 9 10 11 12 khanh=# explain analyze select * from grades where name like \u0026#39;00d4e4727e671\u0026#39;; QUERY PLAN ---------------------------------------------------------------------------------------------------------------------- Gather (cost=1000.00..12946.94 rows=6 width=23) (actual time=45.363..47.072 rows=1 loops=1) Workers Planned: 2 Workers Launched: 2 -\u0026gt; Parallel Seq Scan on grades (cost=0.00..11946.34 rows=2 width=23) (actual time=29.736..29.748 rows=0 loops=3) Filter: (name ~~ \u0026#39;00d4e4727e671\u0026#39;::text) Rows Removed by Filter: 333333 Planning Time: 0.174 ms Execution Time: 47.209 ms (8 rows) There are not much different between = and like without ‘%’. let’s add % to the query:\n1 2 3 4 5 6 7 8 9 10 11 12 khanh=# explain analyze select * from grades where name like \u0026#39;%00d4e4727e671%\u0026#39;; QUERY PLAN ----------------------------------------------------------------------------------------------------------------------- Gather (cost=1000.00..12955.24 rows=89 width=23) (actual time=58.162..60.058 rows=1 loops=1) Workers Planned: 2 Workers Launched: 2 -\u0026gt; Parallel Seq Scan on grades (cost=0.00..11946.34 rows=37 width=23) (actual time=45.619..45.630 rows=0 loops=3) Filter: (name ~~ \u0026#39;%00d4e4727e671%\u0026#39;::text) Rows Removed by Filter: 333333 Planning Time: 0.370 ms Execution Time: 60.164 ms (8 rows) The execution time is a bit longer than before but not too much. 60ms compare to 47ms.\nComparing on index column Let’s create a new index on name column:\n1 2 3 khanh=# CREATE INDEX name_index ON grades(name); CREATE INDEX khanh=# Query with = operator:\n1 2 3 4 5 6 7 8 9 10 11 khanh=# explain analyze select * from grades where name = \u0026#39;00d4e4727e671\u0026#39;; QUERY PLAN ------------------------------------------------------------------------------------------------------------------- Bitmap Heap Scan on grades (cost=4.47..28.01 rows=6 width=23) (actual time=0.101..0.178 rows=1 loops=1) Recheck Cond: (name = \u0026#39;00d4e4727e671\u0026#39;::text) Heap Blocks: exact=1 -\u0026gt; Bitmap Index Scan on name_index (cost=0.00..4.47 rows=6 width=0) (actual time=0.065..0.083 rows=1 loops=1) Index Cond: (name = \u0026#39;00d4e4727e671\u0026#39;::text) Planning Time: 0.986 ms Execution Time: 0.376 ms (7 rows) After adding a index on name column, the query time is improve quite a lot. 47ms without an index, 1ms with an index. Here you can see the database use Bitmap index scan on name_index, so it actually use the index that we just create to speed up the query.\nNext we take a look on whether the index improve query time on like operator:\n1 2 3 4 5 6 7 8 9 10 11 12 khanh=# explain analyze select * from grades where name like \u0026#39;%00d4e4727e671%\u0026#39;; QUERY PLAN ----------------------------------------------------------------------------------------------------------------------- Gather (cost=1000.00..12955.24 rows=89 width=23) (actual time=52.171..53.985 rows=1 loops=1) Workers Planned: 2 Workers Launched: 2 -\u0026gt; Parallel Seq Scan on grades (cost=0.00..11946.34 rows=37 width=23) (actual time=41.987..41.998 rows=0 loops=3) Filter: (name ~~ \u0026#39;%00d4e4727e671%\u0026#39;::text) Rows Removed by Filter: 333333 Planning Time: 0.372 ms Execution Time: 54.188 ms (8 rows) The query time is roughly 54 ms, so it means that the index don’t improve query time if you use like operator, in other words, index don’t involve to like operator. The database is still need to perform a sequence scan to scan all rows in table to find the expected one.\nThat is understandable, because when we use the pattern %search_string%, the database have no choice than loop through the whole table and perform comparing one by one.\nBut, what about pattern text%, you only put % at the end of search string, from my understanding, the database can use index to compare in this case.\n1 2 3 4 5 6 7 8 9 10 11 12 postgres=# explain analyze select * from grades where name like \u0026#39;00d4e4727e671%\u0026#39;; QUERY PLAN ----------------------------------------------------------------------------------------------------------------------- Gather (cost=1000.00..12953.24 rows=89 width=23) (actual time=101.556..107.356 rows=0 loops=1) Workers Planned: 2 Workers Launched: 2 -\u0026gt; Parallel Seq Scan on grades (cost=0.00..11944.34 rows=37 width=23) (actual time=32.084..32.085 rows=0 loops=3) Filter: (name ~~ \u0026#39;00d4e4727e671%\u0026#39;::text) Rows Removed by Filter: 333334 Planning Time: 2.530 ms Execution Time: 107.742 ms (8 rows) This is weird, the database still perform and expensive sequence scan.\nAfter a while of searching on the internet, I found another option when creating index on text column, it is text_pattern_ops.\n1 2 DROP INDEX IF EXISTS name_index; CREATE INDEX name_index ON grades (name text_pattern_ops); Let\u0026rsquo;s see if the new index improve the query time:\n1 2 3 4 5 6 7 8 9 postgres=# explain analyze select * from grades where name like \u0026#39;00d4e4727e671%\u0026#39;; QUERY PLAN --------------------------------------------------------------------------------------------------------------------- Index Scan using name_index on grades (cost=0.42..8.45 rows=89 width=23) (actual time=0.172..0.174 rows=0 loops=1) Index Cond: ((name ~\u0026gt;=~ \u0026#39;00d4e4727e671\u0026#39;::text) AND (name ~\u0026lt;~ \u0026#39;00d4e4727e672\u0026#39;::text)) Filter: (name ~~ \u0026#39;00d4e4727e671%\u0026#39;::text) Planning Time: 4.601 ms Execution Time: 0.475 ms (5 rows) It does! The database uses index scan instead of sequence scan like before, query time is significantly reduced.\nI also did tests on patterns like %search_string% or %search_string, as expected, the text_pattern_ops index can\u0026rsquo;t help. To understand why text_pattern_ops helps the search with pattern search_string%, please read the links that are attached in the References section below.\nConclusion If the column doesn’t have an index, query times of = and like are quite similar.\nIf the column has an index, it reduces significant query time of = operator. whereas, the like operator can’t use index to improve query time.\nBut there is an index option that lets database using index while performing the like operator, it is text_pattern_ops. With this option on, you can use like operator with a pattern like search_string%.\nReferences https://thoughtbot.com/blog/reading-an-explain-analyze-query-plan https://dba.stackexchange.com/questions/53811/why-would-you-index-text-pattern-ops-on-a-text-column https://dba.stackexchange.com/questions/10694/pattern-matching-with-like-similar-to-or-regular-expressions/10696#10696 https://dba.stackexchange.com/questions/240930/postgresql-difference-between-collations-c-and-c-utf-8\n","permalink":"http://localhost:1313/posts/which-operator-is-faster-like-vs-equal/","summary":"\u003ch2 id=\"explain\"\u003eExplain\u003c/h2\u003e\n\u003cp\u003eExplaining the query will help you to estimate how expensive your query is and which query plan will be used.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e6\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ekhanh\u003c/span\u003e\u003cspan class=\"o\"\u003e=#\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eexplain\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eg\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egrades\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ewhere\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eg\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                  \u003c/span\u003e\u003cspan class=\"n\"\u003eQUERY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ePLAN\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e-------------------------------------------------------------------------------\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eIndex\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eOnly\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eScan\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eg_index\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eon\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egrades\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e97\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e55\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003erows\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e4636\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ewidth\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"k\"\u003eIndex\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eCond\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eg\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSo, this query will use \u003cem\u003eIndex-Only-Scan\u003c/em\u003e. The \u003cstrong\u003ecost\u003c/strong\u003e of the query is ranging from 0.42 to 97.55, 4636 is number of estimated return \u003cstrong\u003erows\u003c/strong\u003e, \u003cstrong\u003ewidth\u003c/strong\u003e is size of return data in byte.\u003c/p\u003e","title":"Which operator is faster: like vs ="},{"content":"Check timezone of the current session 1 2 3 4 5 khanh=# show timezone; TimeZone ---------- UTC (1 row) Change timezone of a session 1 2 3 4 5 6 7 khanh=# set timezone=\u0026#39;asia/ho_chi_minh\u0026#39;; SET khanh=# show timezone; TimeZone ------------------ Asia/Ho_Chi_Minh (1 row) you can get timezone names here: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\ntimestamp and timestamptz timestamptz aka timestamp with time zone, the time when return to the client will be converted to the timezone has picked in the session.\ntimestamp aka timestamp without time zone.\nInternally, the database store it as a 64-bit integer microsecond offset since 2000-01-01 in PostgreSQL (by default). Both types don’t store any info related to timezone.\nnow() The now function will return a timestamp with time zone value, the timezone will be the default timezone of database server.\n1 2 3 4 5 6 7 8 9 10 11 khanh=# show timezone; TimeZone ------------------ Asia/Ho_Chi_Minh (1 row) khanh=# select now(); now ------------------------------- 2022-08-20 13:28:49.782568+07 (1 row) 1 2 3 4 5 6 7 8 9 10 11 12 13 khanh=# set timezone=\u0026#39;utc\u0026#39;; SET khanh=# show timezone; TimeZone ---------- UTC (1 row) khanh=# select now(); now ------------------------------- 2022-08-20 06:29:34.177309+00 (1 row) if you want to remove the timezone, just cast the value to type timestamp:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 khanh=# show timezone; TimeZone ---------- UTC (1 row) khanh=# select now(); now ------------------------------ 2022-08-20 07:09:13.94525+00 (1 row) khanh=# select now()::timestamp; now ---------------------------- 2022-08-20 07:09:28.795878 (1 row) At time zone At time zone is a operator to convert timestamptz to timestamp and vice versa.\nhttps://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-ZONECONVERT\ntimestamptz to timestamp For example, the timezone in the database server now is UTC, so now() will return a timestamp with the timezone UTC. If I want to convert the result of now() to timezone +7, here is what I do:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 khanh=# show timezone; TimeZone ---------- UTC (1 row) khanh=# select now(); now ------------------------------- 2022-08-20 07:22:21.113171+00 (1 row) khanh=# select now() at time zone \u0026#39;asia/ho_chi_minh\u0026#39;; timezone ---------------------------- 2022-08-20 14:22:24.534935 (1 row) the result i got is a timestamp without time zone.\n7h at time zone 0 = 14h at time zone 7\ntimestamp to timestamptz 1 2 3 4 5 6 7 8 9 10 11 khanh=# show timezone; TimeZone ---------- UTC (1 row) khanh=# select timestamp \u0026#39;2001-02-16 20:38:40\u0026#39; at time zone \u0026#39;asia/ho_chi_minh\u0026#39;; timezone ------------------------ 2001-02-16 13:38:40+00 (1 row) In the above example, it adds timezone +7 information to timestamp 2001-02-16 20:38:40, to create a timestamp with time zone.\nThe result is display in default time zone of session which is UTC.\n20h at time zone +7 = 13h at time zone 0\nUse cases For example, at 12h, the session timezone is UTC +7, I insert a record to database, if I just query the time normally, this is what you get: 2022-08-21T12:06:52.299305Z which is incorrect. Because the letter Z stands for UTC 0.\nSo when you query, you can convert timestamp to timestamp with time zone +7, by using at time zone:\n1 2 3 4 5 6 7 8 select id, title, artist, price, created_date at time zone \u0026#39;asia/ho_chi_minh\u0026#39; from album This is what you got after converting the time zone: 2022-08-21T12:06:52+07:00\nReferences https://www.cockroachlabs.com/blog/time-data-types-postgresql https://www.postgresqltutorial.com/postgresql-date-functions/postgresql-now\n","permalink":"http://localhost:1313/posts/postgres-timezone/","summary":"\u003ch2 id=\"check-timezone-of-the-current-session\"\u003eCheck timezone of the current session\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e5\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ekhanh\u003c/span\u003e\u003cspan class=\"o\"\u003e=#\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eshow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etimezone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eTimeZone\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e----------\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUTC\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"change-timezone-of-a-session\"\u003eChange timezone of a session\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-1-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-1-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-1-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-3\"\u003e3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-1-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-4\"\u003e4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-1-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-5\"\u003e5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-1-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-6\"\u003e6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-1-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-1-7\"\u003e7\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ekhanh\u003c/span\u003e\u003cspan class=\"o\"\u003e=#\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eset\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etimezone\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;asia/ho_chi_minh\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eSET\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ekhanh\u003c/span\u003e\u003cspan class=\"o\"\u003e=#\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eshow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etimezone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"n\"\u003eTimeZone\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e------------------\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eAsia\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003eHo_Chi_Minh\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eyou can get timezone names here: \u003ca href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\"\u003ehttps://en.wikipedia.org/wiki/List_of_tz_database_time_zones\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"timestamp-and-timestamptz\"\u003e\u003cem\u003etimestamp\u003c/em\u003e and \u003cem\u003etimestamptz\u003c/em\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003etimestamptz\u003c/code\u003e aka \u003ccode\u003etimestamp with time zone\u003c/code\u003e, the time when return to the client will be converted to the timezone has picked in the session.\u003c/p\u003e","title":"Postgres Timezone"},{"content":"What is SSL? and why do we need them? SSL is a method to encrypt your data before transmitting it to the receiver. If we don’t encrypt and send data as plain text, somebody can sniff in your connection to read all your messages.\nHow do SSL works? Of course, to establish an SSL, we need a TCP connection first, let’s assume that we have a TCP connection ready.\nHow an SSL connection is established The client says hello to the server by sending a request with the below data: TLS version client supports (1.0 2.0 ..). cipher suites client supports (algorithm). a random byte: client random. The server says hello to the client by sending a request with the below data: Server’s SSL certificate. the server’s chosen cipher suites. a random byte: server random. The client verifies the SSL certification of the server against its list of Certificate Authorities (CA) generate a pre-master secret encrypted the secret with the server public key and sent it back to the server Server using its the private key to decrypt the pre-master secret using the agreed cipher. Both server and client now can generate the master secret based on client random, server random and pre-master secret. From now on, data transmitting between server and client will be encrypted symmetrically using master secret. Read more about the SSL handshake.\nCan SSL be faked? An SSL usually contains some information like owner/organization, its location public key, validity dates,…\nFor example, if a hacker wants to fake a Google service, he will make a UI look exactly like Google, with the URL slightly different. Since Google adopt SSL so he wants to fake an SSL certificate as well:\nGenerate a new pair of the public and private key Generate a new SSL cert that has information that looks exactly like the one of Google How do they prevent that? That is when CA – Certificate Authority comes into play. To generate an SSL cert is quite simple, but that is not enough, you need to register your SSL cert with a CA as well, and they make sure you can’t register a fake URL.\nThis situation is similar to someone trying to fake me, my name is Khanh and he claims that his name is Khanh too? So how do others differentiate me and the fake one? In real life, we have an organization that issues ID cards, each citizen has a unique ID, if you want to verify where I am the real Khanh, then take the ID and verify with the ID issuing organization because we trust them.\nSo CA is basically a third party that we trust at them, and an SSL is like a citizen ID in real life. They also have paired public and private keys. Conceptually, your certification will be encrypted by their private key, and their public is installed in your browser and OS.\nEvery computer comes with a set of CA public keys out of the box. When the client receives the SSL cert from the server, they will decode the cert using the public key of CA, if it can, then it means the Cert is valid.\nReplay attack Replay Attack Do you wonder why the master secret – the symmetric key used for encrypted data – is made of: client random + server random + pre-master secret?\nWhen we use only pre-master secret as a master secret:\nMan in the middle (MiM) can catch your packet, but he can’t decrypt your data. He will catch all of your packets and resend them from begging of the SSL handshake, event client hello,… That lead to the hacker now will have another connection that has the same master secret as the user The hacker can’t know the secret and the information but he doesn’t need it. He catches your packet and resends it to the server, it is able to decrypt the message since it has the same master secret. So what can the hacker do to make some damage? For example, you order one cup of coffee, but he can resend your request 10 more times, and now you have 11 cups of coffee. Or resend the login request to get an authentication token.\nHow to prevent that?\nIn SSL, the server will assign and send to each client a random unique value. If the hacker catch and resend every one of your packets since the beginging of the SSL handshake, he will have a connection, but the server random value is different (step server hello). The hacker cannot take a packet of the user and resend it after that because the server randomly is not the same as the user.\nWhy don’t we use asymmetric keys to exchange data? Each server has a pair of public and private keys, why don’t the client just encrypt data with the public key, and the server can decrypt data using the private key. Vice versa, the server encrypts data with a private key, and the client decrypts using the public key. Those are based on characteristics of an asymmetric key.\nBecause encrypting data using a symmetric key (the master secret) is faster and needs fewer resources when compared to an asymmetric key.\nReferences https://www.ibm.com/docs/en/cics-tg-multi/9.2?topic=ssl-how-connection-is-established\n","permalink":"http://localhost:1313/posts/note-in-ssl-tls/","summary":"\u003ch2 id=\"what-is-ssl-and-why-do-we-need-them\"\u003eWhat is SSL? and why do we need them?\u003c/h2\u003e\n\u003cp\u003eSSL is a method to encrypt your data before transmitting it to the receiver. If we don’t encrypt and send data as plain text, somebody can sniff in your connection to read all your messages.\u003c/p\u003e\n\u003ch2 id=\"how-do-ssl-works\"\u003eHow do SSL works?\u003c/h2\u003e\n\u003cp\u003eOf course, to establish an SSL, we need a TCP connection first, let’s assume that we have a TCP connection ready.\u003c/p\u003e\n\u003cp\u003e\n  \u003cfigure\u003e\n    \u003cimg src=\"ssl-connection.png\" alt=\"\"\u003e\n    \u003cfigcaption\u003eHow an SSL connection is established\u003c/figcaption\u003e\n  \u003c/figure\u003e\n\u003c/p\u003e","title":"A note in SSL/TLS"},{"content":"No! Not really!\nNodeJS has one main thread called event-loop and it also has a worker pool to handle blocking IO and CPU-intensive tasks. The default number of threads in the worker pool is 4, and you can change it.\nNode.js uses a small number of threads to handle many clients. In Node.js there are two types of threads: one Event Loop (aka the main loop, main thread, event thread, etc.), and a pool of k Workers in a Worker Pool (aka the threadpool).\n\u0026ndash; Don’t Block the Event Loop (or the Worker Pool)\nYou can test it by yourself. Firstly, run the below code snippet, it gonna log out the PID – process id of the app.\n1 2 3 4 5 6 7 8 9 10 const http = require(\u0026#39;http\u0026#39;); const hostname = \u0026#39;127.0.0.1\u0026#39;;const port = 3000; const server = http.createServer( (req, res) =\u0026gt; { res.statusCode = 200; res.setHeader(\u0026#39;Content-Type\u0026#39;, \u0026#39;text/plain\u0026#39;); res.end(\u0026#39;Hello World\u0026#39;); } ); server.listen(port, hostname, () =\u0026gt; { console.log(`PID: ${process.pid}`);}); Next, execute the below command in the Linux terminal, it gonna print out the number of threads of a PID.\n1 ps huH p \u0026lt;PID\u0026gt; | wc -lv For MacOS:\n1 ps -M PID | grep -v USER | wc -l On my computer, the number of threads is 7. The number of threads varies according to different machines, but my point is that NodeJS use more than one thread.\nReferences https://kariera.future-processing.pl/blog/on-problems-with-threads-in-node-js/ https://stackoverflow.com/questions/61550822/why-node-js-spins-7-threads-per-process\n","permalink":"http://localhost:1313/posts/is-nodejs-really-single-threaded/","summary":"\u003cp\u003eNo! Not really!\u003c/p\u003e\n\u003cp\u003eNodeJS has one main thread called event-loop and it also has a worker pool to handle blocking IO and CPU-intensive tasks. The default number of threads in the worker pool is 4, and you can change it.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eNode.js uses a small number of threads to handle many clients. In Node.js there are two types of threads: one Event Loop (aka the main loop, main thread, event thread, etc.), and a pool of k Workers in a Worker Pool (aka the threadpool).\u003c/em\u003e\u003c/p\u003e","title":"Is NodeJS really single-threaded?"},{"content":"What is a branch? A branch is just a pointer that point to a specific commit. Imagine your repository as a graph of commits, commits are identified by hash strings and be connected together. When you create a new branch, git creates a new pointer and points to the selected commit. Even when you delete a branch, the commit is still there.\nWhat is the HEAD pointer? HEAD point to the current commit you are standing. By default HEAD point to the newest commit of the current branch. When you checkout to a specific commit, HEAD will change to point to that commit too.\nGit revert vs reset? Revert Git-revert will create a new commit to revert a previous commit, while git-reset will move your HEAD pointer and branch to the selected commit.\ngit revert HEAD: delete current commit\ngit revert HEAD^: delete parent of the current commit\nReset When your branch is shared with others then you want to do a git-revert, otherwise git-reset would be fined.\ngit reset HEAD^: checkout to HEAD^ commit – parent of the current commit, reassign branch refs to HEAD^.\nGit reset –hard, –mixed, and –soft stackoverflow soft: uncommit your changes, your changes are now left staged (index). mixed (default): uncommit + unstaged changes, changes are left in the working tree. hard: uncommit + unstaged + delete changes, nothing left. Redo git reset hard If you accidentally reset your branch, you still can revert that change by using git reflog. after git reset –hard HEAD^ 3be1a3c: this is the current HEAD\ndf61ddd: this is the commit that I lost\ngit reset --hard df61ddd this command will bring back the commit that I lost.\nGit rebase vs merge? Merge Git merge preserved your history, it will create a new commit to combine to branch, therefore you might notice that a merge commit will have two parents.\n(master*) git merge feature Rebase Git rebase otherwise will edit the history of the target branch, it will make new commits from the source branch, one by one, and append to the target branch(new base), which makes your history look like a straight line. Rebase needs to create new commits because you need to resolve conflict, which makes the new commit doesn’t look like the original commit.\n(feature*) git rebase master: git will make new commits based on the feature branch and append to master\n(master*) git rebase feature: this will fast-forward master point to the same commit (newest) with the feature.\nGit rebase-interactive and cherry-pick git rebase-interactive let you decide what to do with every commits, git will create new commits to replace after that.\nYou can edit commit, edit commit message, squash commits, drop a commit,…\n(develop*) git rebase -i HEAD~5: this is used when you want to edit a previous commit on the current branch.\n(develop*) git rebase -i main: this is to rebase develop into main, but it will let you modify commit when rebasing.\ngit cherry-pick helps you make a copy of a commit from another branch and append it to your current branch.\nReferences https://stackoverflow.com/questions/3528245/whats-the-difference-between-git-reset-mixed-soft-and-hard\n","permalink":"http://localhost:1313/posts/note-in-git/","summary":"\u003ch2 id=\"what-is-a-branch\"\u003eWhat is a branch?\u003c/h2\u003e\n\u003cp\u003eA branch is just a pointer that point to a specific commit. Imagine your repository as a graph of commits, commits are identified by hash strings and be connected together. When you create a new branch, git creates a new pointer and points to the selected commit. Even when you delete a branch, the commit is still there.\u003c/p\u003e\n\u003ch2 id=\"what-is-the-head-pointer\"\u003eWhat is the HEAD pointer?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eHEAD\u003c/code\u003e point to the current commit you are standing. By default \u003ccode\u003eHEAD\u003c/code\u003e point to the newest commit of the current branch. When you checkout to a specific commit, \u003ccode\u003eHEAD\u003c/code\u003e will change to point to that commit too.\u003c/p\u003e","title":"Note in Git"},{"content":"To demonstrate what is the difference between object hash code and object equal, I would like to start with a simple example in Python.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Person: def __init__(self, name: str, age: int) -\u0026gt; None: self.name = name self.age = age def __repr__(self) -\u0026gt; str: return f\u0026#39;{self.name} {self.age}\u0026#39; john = Person(\u0026#39;John\u0026#39;, 18) eventRegister = {} # John want to join the event eventRegister[john] = True # In the next day, # he changes his mind john = Person(\u0026#39;John\u0026#39;, 18) eventRegister[john] = False print(f\u0026#39;registers: {eventRegister}\u0026#39;) # Check john = Person(\u0026#39;John\u0026#39;, 18) print(f\u0026#39;Will John join the event? {eventRegister[john]}\u0026#39;) It’s quite simple, right? I define a new Person class that has two properties age and name. And then I defined a map, to check if a person join the event or not.\nSo I have a person named John, at first he join, but the next day he change his mind and don’t want to join the event anymore because he got a ton of home need to finish 🤕. So my expectation here is when I check if John joins the event, the result should be False.\nLet’s see how it goes! kinda weird 🤔 So on the map, you can see two records with the same values of name and age. The first record is for the time John registered for the event, the second one is the time John withdraw from the event. That is not correct, I expect that there should be only one record in the map representing John.\nAnd lastly, I want to check if John join the event by accessing the map, it doesn’t even know who is John :’)\nHaha, but I am a good student, I work very hard at university, these problems can’t trouble me :D. I remember that in a hash map before putting a pair of keys and values in, it will hash the key to getting a number to find the position of the bucket in the map for this key. So every pair have the same hash will go into the same bucket.\nSo let’s see the hash values of these John objects.\n1 2 3 4 5 6 john = Person(\u0026#39;John\u0026#39;, 18) print(john.__hash__()) john = Person(\u0026#39;John\u0026#39;, 18) print(john.__hash__()) john = Person(\u0026#39;John\u0026#39;, 18) print(john.__hash__()) Let’s see how it goes! Exactly what I expected, despite three John objects all having the same values in their properties, they have different hash values, so they will consider as different objects, and will be put in different buckets on the map.\nSo what is the solution? Haha 😂 pretty simple, I only need to override the hash function of the Person class, so every Person object with the same values in their properties will have the same hash.\n1 2 3 4 5 6 7 8 9 10 class Person: def __init__(self, name: str, age: int) -\u0026gt; None: self.name = name self.age = age def __repr__(self) -\u0026gt; str: return f\u0026#39;{self.name} {self.age}\u0026#39; def __hash__(self) -\u0026gt; int: return hash((self.name, self.age)) 1 2 3 4 5 6 john = Person(\u0026#39;John\u0026#39;, 18) print(john.__hash__()) john = Person(\u0026#39;John\u0026#39;, 18) print(john.__hash__()) john = Person(\u0026#39;John\u0026#39;, 18) print(john.__hash__()) So three John objects with the same values in their properties have the same hash value now. So my first code snippet should work now, haha oops 😬 what wrong? oops 😬 what wrong?\nAfter an hour of searching on the internet, I just remember how a hash map works. GeeksForGeeks I guess, in Python hashmap, they use chaining as a method to handle hashing collision 💥. Hashing collision happens when two different keys have the same hash. In the chaining method, each bucket in the hash map does not contain a pair but a list of pairs. So every pair whose key has the same hash value will be appended to that list.\nThe problem here is, how do you know if your pair (key, value) has been already on the list or not? Pretty simple, using __eq__ function to compare objects, we will iterate through every pair in the list and compare it to the new pair, if the new pair haven’t been in the list, we append it to the list. So the next thing we need to do is to override the __eq__ function.\n1 2 3 4 5 6 7 8 9 10 11 12 13 class Person: def __init__(self, name: str, age: int) -\u0026gt; None: self.name = name self.age = age def __repr__(self) -\u0026gt; str: return f\u0026#39;{self.name} {self.age}\u0026#39; def __hash__(self) -\u0026gt; int: return hash((self.name, self.age)) def __eq__(self, __o: object) -\u0026gt; bool: return self.age == __o.age and self.name == __o.name Everything work now hahaha 🤣🤣🤣 hard work payoff.\nReferences https://www.geeksforgeeks.org/implementing-our-own-hash-table-with-separate-chaining-in-java/\n","permalink":"http://localhost:1313/posts/hashcode-equals/","summary":"\u003cp\u003eTo demonstrate what is the difference between object hash code and object equal, I would like to start with a simple example in Python.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-8\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-9\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-10\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-11\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-12\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-13\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-14\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-15\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-16\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-17\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-18\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-18\"\u003e18\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-19\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-19\"\u003e19\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-20\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-20\"\u003e20\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-21\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-21\"\u003e21\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-22\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-22\"\u003e22\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-23\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-23\"\u003e23\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-24\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-24\"\u003e24\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-25\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-25\"\u003e25\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-26\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-26\"\u003e26\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-27\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-27\"\u003e27\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-28\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-28\"\u003e28\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-29\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-29\"\u003e29\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-30\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-30\"\u003e30\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePerson\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"fm\"\u003e__init__\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"kc\"\u003eNone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"fm\"\u003e__repr__\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ejohn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;John\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eeventRegister\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# John want to join the event\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eeventRegister\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ejohn\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# In the next day,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# he changes his mind\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ejohn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;John\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eeventRegister\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ejohn\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eFalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;registers: \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eeventRegister\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Check\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ejohn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;John\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Will John join the event? \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eeventRegister\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ejohn\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eIt’s quite simple, right? I define a new Person class that has two properties age and name. And then I defined a map, to check if a person join the event or not.\u003c/p\u003e","title":"HashCode VS Equals"},{"content":"B tree and B+ tree B tree is a self-balance tree. I can see that the B tree and AVL tree have a thing in common – it is all self-balance. But the difference is, each node in the AVL tree store exactly one value, and have at most two children. Each node of the B tree contains an array of at most N values and has at most N + 1 children.\nI am not gonna go into details about the B tree or B+ tree, you can read it on Wikipedia.\nHere are two very good demos on B tree and B+ tree, you can try them to understand how those trees work.\nHow does data get stored on a disk? The basic unit of a disk is a block. The size of a block is usually 512MB, which means that when you read, you have to read a whole block of 512MB. If you write, you have to write to a 512MB block.\n512MB is really large, so the database usually stores multiple records in the same block.\nIndex Database stores data in disk, so how do they find a specific record? Well, they have to scan through every record in the table to find your expected record, and IO operations are expensive. But that is when the database doesn’t have an index.\nIn simple words, an index is a way to map from a record identifier to its location on a disk. When using create a table, it usually comes with an index on the ID field, so that index is the mapping from ID to its record location on disk. Because the database stores multiple rows in a disk block, so, the location here is not exactly the location of the expected record, but the location of the block that contains the record. The database will read the whole block and return to you your desired record.\nSo, where does the indexes get stored? Well, on disk. Basically, indexes are additional data structures, it requires more space on the disk to store them.\nSo when a database wants to use an index, it has to read indexes from the disk.\nIs it slow? Yes, at first. The only needed block will be loaded to RAM, not all blocks of the index. But when a block gets accessed frequently, it will be cached, which could increase the performance.\nI have thought why wouldn’t load the whole index to RAM so we can access it quickly. Because the Index could be really big, and the idea of bringing the whole index to RAM is not possible.\nWhy B tree is a good fit for the database index? Why don’t use something like an AVL tree?\nAs I mentioned before, where we store data to disk, the basic unit is 512MB, so we want to put data to block as much as possible.\nSo each block now will store a list of mapping from Identifier to record block location.\nWhy B+ tree even better than Btree? The problem is IO operations are expensive and slow, so we want to avoid them, and the B+ tree helps us do that.\nB+ tree only stores key (or identifier) in a non-leaf node, which means one block now can store more mapping than before. B tree stores a list of pairs of a key and a location on a non-leaf node, it stores fewer mapping items per disk block.\nLet say, when using the B tree, we can store 100 mapping per disk block, but the B+ tree could possibly store 150 mapping per disk block.\nWhat does it mean? Each node in the B tree can have at most 101 children, but the B+ tree has at most 151 children. Each node in the B+ tree can store more information make the tree shorter when compared with the B tree.\nIn other words, in my example, read a block in B tree has time complexity O(log(n/100)), while the B+ tree has smaller time complexity O(log(n/150)). Where n = number of rows.\nDisadvantages of B+ tree When you use the B+ tree, even you found the key that you want, you still have to travel to the leaf node to take the value – location of the disk block contains the desired record.\nReferences https://stackoverflow.com/a/870324 https://stackoverflow.com/a/1130\n","permalink":"http://localhost:1313/posts/b-tree-and-indexing-in-database/","summary":"\u003ch2 id=\"b-tree-and-b-tree\"\u003eB tree and B+ tree\u003c/h2\u003e\n\u003cp\u003eB tree is a self-balance tree. I can see that the B tree and AVL tree have a thing in common – it is all self-balance. But the difference is, each node in the AVL tree store exactly one value, and have at most two children. Each node of the B tree contains an array of at most \u003cstrong\u003eN\u003c/strong\u003e values and has at most \u003cstrong\u003eN + 1\u003c/strong\u003e children.\u003c/p\u003e","title":"B tree, B+ tree, and indexing in database"},{"content":"1. Read phenomena When transaction A reads the data that might be changed by transaction B.\n1.1 Dirty reads: Is when a transaction read uncommitted data from another transaction. Example:\nTransaction A Transaction B begin transaction; select age from employee where id = 1; // age = 24 begin transaction; update employee set age = 25 where id = 1; // age = 25 select age from employee where id = 1; // age = 25 rollback; select age from employee where id = 1; // age = 24 commit; 1.2 Non-repeatable reads When during a transaction, you retrieve a row two times, and the second time, you got a slightly different row. It is different from the dirty read in that this time, it read committed data.\nTransaction A Transaction B begin transaction; select age from employee where id = 1; // age = 24 begin transaction; update employee set age = 25 where id = 1; // age = 25 commit; select age from employee where id = 1; // age = 25 commit; 1.3 Phantom read When during a transaction, you perform two queries, and the number of rows you got each time is different due to some other transaction inserting or deleting new data.\nTransaction A Transaction B begin transaction; select * from employee where age \u0026gt; 18 and age \u0026lt; 24; // 4 rows begin transaction; insert into employee(id, age) values(20); commit; select * from employee where age \u0026gt; 18 and age \u0026lt; 24; // 5 rows commit; 1.4 Serialization anomaly https://dba.stackexchange.com/a/315353\n2. Isolation level 2.1 Read uncommitted Transaction A could see uncommitted changes from Transaction B, in other words, it allows** dirty read** to happen.\n2.2 Read committed Transaction A could see committed changes from Transaction B. No dirty read at this level, but non-repeatable read and phantom read are possible.\n2.3 Repeatable reads It inherits from read-committed, and no non-repeatable read in this level, it means that no matter how many times you query for a row in a single transaction, you are a warranty that all the values in the row remain unchanged.\nBut phantom read could happen at this level.\n2.4 Serializable Not any read phenomena could happen at this level, this is the highest level of isolation.\nIn the Serializable Isolation Level, all transactions have to execute in sequential order, it cannot be executed in parallel like in the Repeatable level.\n3. Default Isolation level in Postgres The default isolation level of Postgres is Read Committed.\nThere is no way to read uncommitted in Postgres.\nPhantom-read is prevented even in Repeatable reads Isolation Level.\n4. References https://en.wikipedia.org/wiki/Isolation_(database_systems) https://dev.to/techschoolguru/understand-isolation-levels-read-phenomena-in-mysql-postgres-c2e https://www.postgresql.org/docs/current/transaction-iso.html\n","permalink":"http://localhost:1313/posts/isolation-level-and-read-phenomena/","summary":"\u003ch2 id=\"1-read-phenomena\"\u003e1. Read phenomena\u003c/h2\u003e\n\u003cp\u003eWhen transaction A reads the data that might be changed by transaction B.\u003c/p\u003e\n\u003ch3 id=\"11-dirty-reads\"\u003e1.1 Dirty reads:\u003c/h3\u003e\n\u003cp\u003eIs when a transaction read uncommitted data from another transaction. Example:\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e\u003cstrong\u003eTransaction A\u003c/strong\u003e\u003c/th\u003e\n          \u003cth style=\"text-align: right\"\u003e\u003cstrong\u003eTransaction B\u003c/strong\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ebegin transaction;\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eselect age from employee where id = 1;\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e// age = 24\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: right\"\u003ebegin transaction;\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: right\"\u003eupdate employee set age = 25 where id = 1;\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: right\"\u003e// age = 25\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eselect age from employee where id = 1;\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e// age = 25\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: right\"\u003erollback;\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eselect age from employee where id = 1;\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e// age = 24\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ecommit;\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"12-non-repeatable-reads\"\u003e1.2 Non-repeatable reads\u003c/h3\u003e\n\u003cp\u003eWhen during a transaction, you retrieve a row two times, and the second time, you got a slightly different row. It is different from the dirty read in that this time, it read committed data.\u003c/p\u003e","title":"Isolation Level and Read Phenomena"},{"content":"Atomicity: Each transaction could have multiple steps in it, each step might be a query or an update to the data. Atomicity means that the transaction is considered a success if all steps are a success. If just one of those steps is failed, the whole transaction is considered to fail, and it has to roll back to the previous state.\nConsistency: In the database, it might have some rules or constraints, and the transaction when modified data have to follow those constraints. For example, let say the constrain for bank account balance is 0 or positive, so if a transaction tries to assign a negative number to a bank account, it violates the constrain and has to roll back.\nIsolation: At a time, there could be multiple transactions are trying to read or write to the database concurrently. There is nothing to say if all transactions are not trying to access or modify the same data, but in reality, they do a lot. So, the goal of isolation is to ensure that executing multiple transactions at the same time does not lead to a consistent state. They usually use a lock to achieve isolation in the database.\nDurability: This may be the easiest term to understand in ACID. Durability means once I have committed my transaction, my data will be in the database whenever I need it. The server could be down for some reason, but when it comes to online again, my data have to be ready to serve.\n","permalink":"http://localhost:1313/posts/acid/","summary":"\u003cp\u003e\u003cstrong\u003eAtomicity\u003c/strong\u003e: Each transaction could have multiple steps in it, each step might be a query or an update to the data. Atomicity means that the transaction is considered a success if all steps are a success. If just one of those steps is failed, the whole transaction is considered to fail, and it has to roll back to the previous state.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConsistency\u003c/strong\u003e: In the database, it might have some rules or constraints, and the transaction when modified data have to follow those constraints. For example, let say the constrain for bank account balance is 0 or positive, so if a transaction tries to assign a negative number to a bank account, it violates the constrain and has to roll back.\u003c/p\u003e","title":"ACID"},{"content":"So this is just a quick recap of what I have learned about networking\nFirst, you have to connect your computer to the local network. Your computer then will be assigned a local IP by a DHCP server (Dynamic Host Configuration Protocol), you cannot use that local IP to talk to the outside network. All the devices in the same local network will use the IP of the gateway to talk to the internet, sometimes it’s called public IP. The protocol to map from local address to public address is called NAT (Network Address Translation).\nGoogle.com is a URL, the computer doesn’t understand those names, they made those up so the human can remember them easier.\nTherefore, the first thing is to convert google.com to an IP address. The computer can do that using DNS protocol, each ISP will have a default DNS server, or you also can choose the DNS server that you want. So now you will have the IP of the server and be ready to make a connection.\nNow, the client will make a TCP connection to the server using a “three ways handshake“. After that, if we use HTTPS, then right after TCP connection is established, TLS/SSL handshake will happen, the server will send a TLS/SSL Certification and it’s the public key to the client, the client then verify to see if the certificate is valid or not.\nWhen the TCP connection is ready, the client can use HTTP/HTTPS protocol over TCP/IP protocol to talk to the server to request resources.\nHTTP -\u0026gt; TCP -\u0026gt; IP -\u0026gt; PPP\nTCP is a protocol to exchange messages between two processes, could be in the same or different machine. We usually see TCP come with IP, IP is another protocol to exchange messages between two hosts.\nBellow IP protocol could be PPP (Point to Point Protocol). So the IP package is transferred by PPP, and PPP doesn’t use an IP address, it uses MAC Address instead. So there is an ARP (Address Resolution Protocol) to get MAC addresses of surrounding hosts.\n","permalink":"http://localhost:1313/posts/what-happen-when-you-use-a-browser-to-access-google/","summary":"\u003cp\u003eSo this is just a quick recap of what I have learned about networking\u003c/p\u003e\n\u003cp\u003eFirst, you have to connect your computer to the local network. Your computer then will be assigned a local IP by a \u003cstrong\u003eDHCP\u003c/strong\u003e server (Dynamic Host Configuration Protocol), you cannot use that local IP to talk to the outside network. All the devices in the same local network will use the IP of the gateway to talk to the internet, sometimes it’s called public IP. The protocol to map from local address to public address is called \u003cstrong\u003eNAT\u003c/strong\u003e (Network Address Translation).\u003c/p\u003e","title":"What happens when you use a browser to access google.com"}]