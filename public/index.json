[{"content":"What is SSL? and why do we need them? SSL is a method to encrypt your data before transmitting it to the receiver. If we donâ€™t encrypt and send data as plain text, somebody can sniff in your connection to read all your messages.\nHow do SSL works? Of course, to establish an SSL, we need a TCP connection first, letâ€™s assume that we have a TCP connection ready.\nHow an SSL connection is established The client says hello to the server by sending a request with the below data: TLS version client supports (1.0 2.0 ..). cipher suites client supports (algorithm). a random byte: client random. The server says hello to the client by sending a request with the below data: Serverâ€™s SSL certificate. the serverâ€™s chosen cipher suites. a random byte: server random. The client verifies the SSL certification of the server against its list of Certificate Authorities (CA) generate a pre-master secret encrypted the secret with the server public key and sent it back to the server Server using its the private key to decrypt the pre-master secret using the agreed cipher. Both server and client now can generate the master secret based on client random, server random and pre-master secret. From now on, data transmitting between server and client will be encrypted symmetrically using master secret. Read more about the SSL handshake.\nCan SSL be faked? An SSL usually contains some information like owner/organization, its location public key, validity dates,â€¦\nFor example, if a hacker wants to fake a Google service, he will make a UI look exactly like Google, with the URL slightly different. Since Google adopt SSL so he wants to fake an SSL certificate as well:\nGenerate a new pair of the public and private key Generate a new SSL cert that has information that looks exactly like the one of Google How do they prevent that? That is when CA â€“ Certificate Authority comes into play. To generate an SSL cert is quite simple, but that is not enough, you need to register your SSL cert with a CA as well, and they make sure you canâ€™t register a fake URL.\nThis situation is similar to someone trying to fake me, my name is Khanh and he claims that his name is Khanh too? So how do others differentiate me and the fake one? In real life, we have an organization that issues ID cards, each citizen has a unique ID, if you want to verify where I am the real Khanh, then take the ID and verify with the ID issuing organization because we trust them.\nSo CA is basically a third party that we trust at them, and an SSL is like a citizen ID in real life. They also have paired public and private keys. Conceptually, your certification will be encrypted by their private key, and their public is installed in your browser and OS.\nEvery computer comes with a set of CA public keys out of the box. When the client receives the SSL cert from the server, they will decode the cert using the public key of CA, if it can, then it means the Cert is valid.\nReplay attack Replay Attack Do you wonder why the master secret â€“ the symmetric key used for encrypted data â€“ is made of: client random + server random + pre-master secret?\nWhen we use only pre-master secret as a master secret:\nMan in the middle (MiM) can catch your packet, but he canâ€™t decrypt your data. He will catch all of your packets and resend them from begging of the SSL handshake, event client hello,â€¦ That lead to the hacker now will have another connection that has the same master secret as the user The hacker canâ€™t know the secret and the information but he doesnâ€™t need it. He catches your packet and resends it to the server, it is able to decrypt the message since it has the same master secret. So what can the hacker do to make some damage? For example, you order one cup of coffee, but he can resend your request 10 more times, and now you have 11 cups of coffee. Or resend the login request to get an authentication token.\nHow to prevent that?\nIn SSL, the server will assign and send to each client a random unique value. If the hacker catch and resend every one of your packets since the beginging of the SSL handshake, he will have a connection, but the server random value is different (step server hello). The hacker cannot take a packet of the user and resend it after that because the server randomly is not the same as the user.\nWhy donâ€™t we use asymmetric keys to exchange data? Each server has a pair of public and private keys, why donâ€™t the client just encrypt data with the public key, and the server can decrypt data using the private key. Vice versa, the server encrypts data with a private key, and the client decrypts using the public key. Those are based on characteristics of an asymmetric key.\nBecause encrypting data using a symmetric key (the master secret) is faster and needs fewer resources when compared to an asymmetric key.\n","permalink":"https://khanh1998.github.io/posts/note-in-ssl-tls/","summary":"\u003ch2 id=\"what-is-ssl-and-why-do-we-need-them\"\u003eWhat is SSL? and why do we need them?\u003c/h2\u003e\n\u003cp\u003eSSL is a method to encrypt your data before transmitting it to the receiver. If we donâ€™t encrypt and send data as plain text, somebody can sniff in your connection to read all your messages.\u003c/p\u003e\n\u003ch2 id=\"how-do-ssl-works\"\u003eHow do SSL works?\u003c/h2\u003e\n\u003cp\u003eOf course, to establish an SSL, we need a TCP connection first, letâ€™s assume that we have a TCP connection ready.\u003c/p\u003e\n\u003cp\u003e\n  \u003cfigure\u003e\n    \u003cimg src=\"ssl-connection.png\" alt=\"\"\u003e\n    \u003cfigcaption\u003eHow an SSL connection is established\u003c/figcaption\u003e\n  \u003c/figure\u003e\n\u003c/p\u003e","title":"A note in SSL/TLS"},{"content":"No! Not really!\nNodeJS has one main thread called event-loop and it also has a worker pool to handle blocking IO and CPU-intensive tasks. The default number of threads in the worker pool is 4, and you can change it.\nNode.js uses a small number of threads to handle many clients. In Node.js there are two types of threads: one Event Loop (aka the main loop, main thread, event thread, etc.), and a pool of k Workers in a Worker Pool (aka the threadpool).\n\u0026ndash; Donâ€™t Block the Event Loop (or the Worker Pool)\nYou can test it by yourself. Firstly, run the below code snippet, it gonna log out the PID â€“ process id of the app.\n1 2 3 4 5 6 7 8 9 10 const http = require(\u0026#39;http\u0026#39;); const hostname = \u0026#39;127.0.0.1\u0026#39;;const port = 3000; const server = http.createServer( (req, res) =\u0026gt; { res.statusCode = 200; res.setHeader(\u0026#39;Content-Type\u0026#39;, \u0026#39;text/plain\u0026#39;); res.end(\u0026#39;Hello World\u0026#39;); } ); server.listen(port, hostname, () =\u0026gt; { console.log(`PID: ${process.pid}`);}); Next, execute the below command in the Linux terminal, it gonna print out the number of threads of a PID.\n1 ps huH p \u0026lt;PID\u0026gt; | wc -lv For MacOS:\n1 ps -M PID | grep -v USER | wc -l On my computer, the number of threads is 7. The number of threads varies according to different machines, but my point is that NodeJS use more than one thread.\nReferences https://kariera.future-processing.pl/blog/on-problems-with-threads-in-node-js/ https://stackoverflow.com/questions/61550822/why-node-js-spins-7-threads-per-process\n","permalink":"https://khanh1998.github.io/posts/is-nodejs-really-single-threaded/","summary":"\u003cp\u003eNo! Not really!\u003c/p\u003e\n\u003cp\u003eNodeJS has one main thread called event-loop and it also has a worker pool to handle blocking IO and CPU-intensive tasks. The default number of threads in the worker pool is 4, and you can change it.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eNode.js uses a small number of threads to handle many clients. In Node.js there are two types of threads: one Event Loop (aka the main loop, main thread, event thread, etc.), and a pool of k Workers in a Worker Pool (aka the threadpool).\u003c/em\u003e\u003c/p\u003e","title":"Is NodeJS really single-threaded?"},{"content":"To demonstrate what is the difference between object hash code and object equal, I would like to start with a simple example in Python.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Person: def __init__(self, name: str, age: int) -\u0026gt; None: self.name = name self.age = age def __repr__(self) -\u0026gt; str: return f\u0026#39;{self.name} {self.age}\u0026#39; john = Person(\u0026#39;John\u0026#39;, 18) eventRegister = {} # John want to join the event eventRegister[john] = True # In the next day, # he changes his mind john = Person(\u0026#39;John\u0026#39;, 18) eventRegister[john] = False print(f\u0026#39;registers: {eventRegister}\u0026#39;) # Check john = Person(\u0026#39;John\u0026#39;, 18) print(f\u0026#39;Will John join the event? {eventRegister[john]}\u0026#39;) Itâ€™s quite simple, right? I define a new Person class that has two properties age and name. And then I defined a map, to check if a person join the event or not.\nSo I have a person named John, at first he join, but the next day he change his mind and donâ€™t want to join the event anymore because he got a ton of home need to finish ðŸ¤•. So my expectation here is when I check if John joins the event, the result should be False.\nLetâ€™s see how it goes! kinda weird ðŸ¤” So on the map, you can see two records with the same values of name and age. The first record is for the time John registered for the event, the second one is the time John withdraw from the event. That is not correct, I expect that there should be only one record in the map representing John.\nAnd lastly, I want to check if John join the event by accessing the map, it doesnâ€™t even know who is John :â€™)\nHaha, but I am a good student, I work very hard at university, these problems canâ€™t trouble me :D. I remember that in a hash map before putting a pair of keys and values in, it will hash the key to getting a number to find the position of the bucket in the map for this key. So every pair have the same hash will go into the same bucket.\nSo letâ€™s see the hash values of these John objects.\n1 2 3 4 5 6 john = Person(\u0026#39;John\u0026#39;, 18) print(john.__hash__()) john = Person(\u0026#39;John\u0026#39;, 18) print(john.__hash__()) john = Person(\u0026#39;John\u0026#39;, 18) print(john.__hash__()) Letâ€™s see how it goes! Exactly what I expected, despite three John objects all having the same values in their properties, they have different hash values, so they will consider as different objects, and will be put in different buckets on the map.\nSo what is the solution? Haha ðŸ˜‚ pretty simple, I only need to override the hash function of the Person class, so every Person object with the same values in their properties will have the same hash.\n1 2 3 4 5 6 7 8 9 10 class Person: def __init__(self, name: str, age: int) -\u0026gt; None: self.name = name self.age = age def __repr__(self) -\u0026gt; str: return f\u0026#39;{self.name} {self.age}\u0026#39; def __hash__(self) -\u0026gt; int: return hash((self.name, self.age)) 1 2 3 4 5 6 john = Person(\u0026#39;John\u0026#39;, 18) print(john.__hash__()) john = Person(\u0026#39;John\u0026#39;, 18) print(john.__hash__()) john = Person(\u0026#39;John\u0026#39;, 18) print(john.__hash__()) So three John objects with the same values in their properties have the same hash value now. So my first code snippet should work now, haha oops ðŸ˜¬ what wrong? oops ðŸ˜¬ what wrong?\nAfter an hour of searching on the internet, I just remember how a hash map works. GeeksForGeeks I guess, in Python hashmap, they use chaining as a method to handle hashing collision ðŸ’¥. Hashing collision happens when two different keys have the same hash. In the chaining method, each bucket in the hash map does not contain a pair but a list of pairs. So every pair whose key has the same hash value will be appended to that list.\nThe problem here is, how do you know if your pair (key, value) has been already on the list or not? Pretty simple, using __eq__ function to compare objects, we will iterate through every pair in the list and compare it to the new pair, if the new pair havenâ€™t been in the list, we append it to the list. So the next thing we need to do is to override the __eq__ function.\n1 2 3 4 5 6 7 8 9 10 11 12 13 class Person: def __init__(self, name: str, age: int) -\u0026gt; None: self.name = name self.age = age def __repr__(self) -\u0026gt; str: return f\u0026#39;{self.name} {self.age}\u0026#39; def __hash__(self) -\u0026gt; int: return hash((self.name, self.age)) def __eq__(self, __o: object) -\u0026gt; bool: return self.age == __o.age and self.name == __o.name Everything work now hahaha ðŸ¤£ðŸ¤£ðŸ¤£ hard work payoff.\n","permalink":"https://khanh1998.github.io/posts/hashcode-equals/","summary":"\u003cp\u003eTo demonstrate what is the difference between object hash code and object equal, I would like to start with a simple example in Python.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\" id=\"hl-0-1\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-2\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-3\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-4\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-5\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-6\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-7\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-8\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-9\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-10\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-11\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-12\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-13\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-14\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-15\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-16\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-17\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-18\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-18\"\u003e18\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-19\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-19\"\u003e19\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-20\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-20\"\u003e20\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-21\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-21\"\u003e21\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-22\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-22\"\u003e22\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-23\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-23\"\u003e23\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-24\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-24\"\u003e24\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-25\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-25\"\u003e25\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-26\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-26\"\u003e26\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-27\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-27\"\u003e27\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-28\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-28\"\u003e28\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-29\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-29\"\u003e29\u003c/a\u003e\n\u003c/span\u003e\u003cspan class=\"lnt\" id=\"hl-0-30\"\u003e\u003ca class=\"lnlinks\" href=\"#hl-0-30\"\u003e30\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePerson\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"fm\"\u003e__init__\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"kc\"\u003eNone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"fm\"\u003e__repr__\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ejohn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;John\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eeventRegister\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# John want to join the event\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eeventRegister\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ejohn\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# In the next day,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# he changes his mind\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ejohn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;John\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eeventRegister\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ejohn\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eFalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;registers: \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eeventRegister\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Check\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ejohn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;John\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Will John join the event? \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eeventRegister\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ejohn\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eItâ€™s quite simple, right? I define a new Person class that has two properties age and name. And then I defined a map, to check if a person join the event or not.\u003c/p\u003e","title":"HashCode VS Equals"},{"content":"B tree and B+ tree B tree is a self-balance tree. I can see that the B tree and AVL tree have a thing in common â€“ it is all self-balance. But the difference is, each node in the AVL tree store exactly one value, and have at most two children. Each node of the B tree contains an array of at most N values and has at most N + 1 children.\nI am not gonna go into details about the B tree or B+ tree, you can read it on Wikipedia.\nHere are two very good demos on B tree and B+ tree, you can try them to understand how those trees work.\nHow does data get stored on a disk? The basic unit of a disk is a block. The size of a block is usually 512MB, which means that when you read, you have to read a whole block of 512MB. If you write, you have to write to a 512MB block.\n512MB is really large, so the database usually stores multiple records in the same block.\nIndex Database stores data in disk, so how do they find a specific record? Well, they have to scan through every record in the table to find your expected record, and IO operations are expensive. But that is when the database doesnâ€™t have an index.\nIn simple words, an index is a way to map from a record identifier to its location on a disk. When using create a table, it usually comes with an index on the ID field, so that index is the mapping from ID to its record location on disk. Because the database stores multiple rows in a disk block, so, the location here is not exactly the location of the expected record, but the location of the block that contains the record. The database will read the whole block and return to you your desired record.\nSo, where does the indexes get stored? Well, on disk. Basically, indexes are additional data structures, it requires more space on the disk to store them.\nSo when a database wants to use an index, it has to read indexes from the disk.\nIs it slow? Yes, at first. The only needed block will be loaded to RAM, not all blocks of the index. But when a block gets accessed frequently, it will be cached, which could increase the performance.\nI have thought why wouldnâ€™t load the whole index to RAM so we can access it quickly. Because the Index could be really big, and the idea of bringing the whole index to RAM is not possible.\nWhy B tree is a good fit for the database index? Why donâ€™t use something like an AVL tree?\nAs I mentioned before, where we store data to disk, the basic unit is 512MB, so we want to put data to block as much as possible.\nSo each block now will store a list of mapping from Identifier to record block location.\nWhy B+ tree even better than Btree? The problem is IO operations are expensive and slow, so we want to avoid them, and the B+ tree helps us do that.\nB+ tree only stores key (or identifier) in a non-leaf node, which means one block now can store more mapping than before. B tree stores a list of pairs of a key and a location on a non-leaf node, it stores fewer mapping items per disk block.\nLet say, when using the B tree, we can store 100 mapping per disk block, but the B+ tree could possibly store 150 mapping per disk block.\nWhat does it mean? Each node in the B tree can have at most 101 children, but the B+ tree has at most 151 children. Each node in the B+ tree can store more information make the tree shorter when compared with the B tree.\nIn other words, in my example, read a block in B tree has time complexity O(log(n/100)), while the B+ tree has smaller time complexity O(log(n/150)). Where n = number of rows.\nDisadvantages of B+ tree When you use the B+ tree, even you found the key that you want, you still have to travel to the leaf node to take the value â€“ location of the disk block contains the desired record.\nReferences https://stackoverflow.com/a/870324\nhttps://stackoverflow.com/a/1130\n","permalink":"https://khanh1998.github.io/posts/b-tree-and-indexing-in-database/","summary":"\u003ch2 id=\"b-tree-and-b-tree\"\u003eB tree and B+ tree\u003c/h2\u003e\n\u003cp\u003eB tree is a self-balance tree. I can see that the B tree and AVL tree have a thing in common â€“ it is all self-balance. But the difference is, each node in the AVL tree store exactly one value, and have at most two children. Each node of the B tree contains an array of at most \u003cstrong\u003eN\u003c/strong\u003e values and has at most \u003cstrong\u003eN + 1\u003c/strong\u003e children.\u003c/p\u003e","title":"B tree, B+ tree, and indexing in database"},{"content":"1. Read phenomena When transaction A reads the data that might be changed by transaction B.\n1.1 Dirty reads: Is when a transaction read uncommitted data from another transaction. Example:\nTransaction A Transaction B begin transaction; select age from employee where id = 1; // age = 24 begin transaction; update employee set age = 25 where id = 1; // age = 25 select age from employee where id = 1; // age = 25 rollback; select age from employee where id = 1; // age = 24 commit; 1.2 Non-repeatable reads When during a transaction, you retrieve a row two times, and the second time, you got a slightly different row. It is different from the dirty read in that this time, it read committed data.\nTransaction A Transaction B begin transaction; select age from employee where id = 1; // age = 24 begin transaction; update employee set age = 25 where id = 1; // age = 25 commit; select age from employee where id = 1; // age = 25 commit; 1.3 Phantom read When during a transaction, you perform two queries, and the number of rows you got each time is different due to some other transaction inserting or deleting new data.\nTransaction A Transaction B begin transaction; select * from employee where age \u0026gt; 18 and age \u0026lt; 24; // 4 rows begin transaction; insert into employee(id, age) values(20); commit; select * from employee where age \u0026gt; 18 and age \u0026lt; 24; // 5 rows commit; 1.4 Serialization anomaly https://dba.stackexchange.com/a/315353\n2. Isolation level 2.1 Read uncommitted Transaction A could see uncommitted changes from Transaction B, in other words, it allows** dirty read** to happen.\n2.2 Read committed Transaction A could see committed changes from Transaction B. No dirty read at this level, but non-repeatable read and phantom read are possible.\n2.3 Repeatable reads It inherits from read-committed, and no non-repeatable read in this level, it means that no matter how many times you query for a row in a single transaction, you are a warranty that all the values in the row remain unchanged.\nBut phantom read could happen at this level.\n2.4 Serializable Not any read phenomena could happen at this level, this is the highest level of isolation.\nIn the Serializable Isolation Level, all transactions have to execute in sequential order, it cannot be executed in parallel like in the Repeatable level.\n3. Default Isolation level in Postgres The default isolation level of Postgres is Read Committed.\nThere is no way to read uncommitted in Postgres.\nPhantom-read is prevented even in Repeatable reads Isolation Level.\n4. References en.wikipedia.org/wiki/Isolation_(database_systems)\ndev.to/techschoolguru/understand-isolation-levels-read-phenomena-in-mysql-postgres-c2e\npostgresql.org/docs/current/transaction-iso.html\n","permalink":"https://khanh1998.github.io/posts/isolation-level-and-read-phenomena/","summary":"\u003ch2 id=\"1-read-phenomena\"\u003e1. Read phenomena\u003c/h2\u003e\n\u003cp\u003eWhen transaction A reads the data that might be changed by transaction B.\u003c/p\u003e\n\u003ch3 id=\"11-dirty-reads\"\u003e1.1 Dirty reads:\u003c/h3\u003e\n\u003cp\u003eIs when a transaction read uncommitted data from another transaction. Example:\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e\u003cstrong\u003eTransaction A\u003c/strong\u003e\u003c/th\u003e\n          \u003cth style=\"text-align: right\"\u003e\u003cstrong\u003eTransaction B\u003c/strong\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ebegin transaction;\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eselect age from employee where id = 1;\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e// age = 24\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: right\"\u003ebegin transaction;\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: right\"\u003eupdate employee set age = 25 where id = 1;\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: right\"\u003e// age = 25\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eselect age from employee where id = 1;\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e// age = 25\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: right\"\u003erollback;\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eselect age from employee where id = 1;\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e// age = 24\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ecommit;\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"12-non-repeatable-reads\"\u003e1.2 Non-repeatable reads\u003c/h3\u003e\n\u003cp\u003eWhen during a transaction, you retrieve a row two times, and the second time, you got a slightly different row. It is different from the dirty read in that this time, it read committed data.\u003c/p\u003e","title":"Isolation Level and Read Phenomena"},{"content":"Atomicity: Each transaction could have multiple steps in it, each step might be a query or an update to the data. Atomicity means that the transaction is considered a success if all steps are a success. If just one of those steps is failed, the whole transaction is considered to fail, and it has to roll back to the previous state.\nConsistency: In the database, it might have some rules or constraints, and the transaction when modified data have to follow those constraints. For example, let say the constrain for bank account balance is 0 or positive, so if a transaction tries to assign a negative number to a bank account, it violates the constrain and has to roll back.\nIsolation: At a time, there could be multiple transactions are trying to read or write to the database concurrently. There is nothing to say if all transactions are not trying to access or modify the same data, but in reality, they do a lot. So, the goal of isolation is to ensure that executing multiple transactions at the same time does not lead to a consistent state. They usually use a lock to achieve isolation in the database.\nDurability: This may be the easiest term to understand in ACID. Durability means once I have committed my transaction, my data will be in the database whenever I need it. The server could be down for some reason, but when it comes to online again, my data have to be ready to serve.\n","permalink":"https://khanh1998.github.io/posts/acid/","summary":"\u003cp\u003e\u003cstrong\u003eAtomicity\u003c/strong\u003e: Each transaction could have multiple steps in it, each step might be a query or an update to the data. Atomicity means that the transaction is considered a success if all steps are a success. If just one of those steps is failed, the whole transaction is considered to fail, and it has to roll back to the previous state.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConsistency\u003c/strong\u003e: In the database, it might have some rules or constraints, and the transaction when modified data have to follow those constraints. For example, let say the constrain for bank account balance is 0 or positive, so if a transaction tries to assign a negative number to a bank account, it violates the constrain and has to roll back.\u003c/p\u003e","title":"ACID"},{"content":"So this is just a quick recap of what I have learned about networking\nFirst, you have to connect your computer to the local network. Your computer then will be assigned a local IP by a DHCP server (Dynamic Host Configuration Protocol), you cannot use that local IP to talk to the outside network. All the devices in the same local network will use the IP of the gateway to talk to the internet, sometimes itâ€™s called public IP. The protocol to map from local address to public address is called NAT (Network Address Translation).\nGoogle.com is a URL, the computer doesnâ€™t understand those names, they made those up so the human can remember them easier.\nTherefore, the first thing is to convert google.com to an IP address. The computer can do that using DNS protocol, each ISP will have a default DNS server, or you also can choose the DNS server that you want. So now you will have the IP of the server and be ready to make a connection.\nNow, the client will make a TCP connection to the server using a â€œthree ways handshakeâ€œ. After that, if we use HTTPS, then right after TCP connection is established, TLS/SSL handshake will happen, the server will send a TLS/SSL Certification and itâ€™s the public key to the client, the client then verify to see if the certificate is valid or not.\nWhen the TCP connection is ready, the client can use HTTP/HTTPS protocol over TCP/IP protocol to talk to the server to request resources.\nHTTP -\u0026gt; TCP -\u0026gt; IP -\u0026gt; PPP\nTCP is a protocol to exchange messages between two processes, could be in the same or different machine. We usually see TCP come with IP, IP is another protocol to exchange messages between two hosts.\nBellow IP protocol could be PPP (Point to Point Protocol). So the IP package is transferred by PPP, and PPP doesnâ€™t use an IP address, it uses MAC Address instead. So there is an ARP (Address Resolution Protocol) to get MAC addresses of surrounding hosts.\n","permalink":"https://khanh1998.github.io/posts/what-happen-when-you-use-a-browser-to-access-google/","summary":"\u003cp\u003eSo this is just a quick recap of what I have learned about networking\u003c/p\u003e\n\u003cp\u003eFirst, you have to connect your computer to the local network. Your computer then will be assigned a local IP by a \u003cstrong\u003eDHCP\u003c/strong\u003e server (Dynamic Host Configuration Protocol), you cannot use that local IP to talk to the outside network. All the devices in the same local network will use the IP of the gateway to talk to the internet, sometimes itâ€™s called public IP. The protocol to map from local address to public address is called \u003cstrong\u003eNAT\u003c/strong\u003e (Network Address Translation).\u003c/p\u003e","title":"What happens when you use a browser to access google.com"}]