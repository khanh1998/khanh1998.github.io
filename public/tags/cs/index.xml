<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cs on Khanh1998</title>
    <link>https://khanh1998.github.io/tags/cs/</link>
    <description>Recent content in Cs on Khanh1998</description>
    <image>
      <title>Khanh1998</title>
      <url>https://khanh1998.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://khanh1998.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.147.2</generator>
    <language>en</language>
    <lastBuildDate>Fri, 11 Apr 2025 20:56:56 +0700</lastBuildDate>
    <atom:link href="https://khanh1998.github.io/tags/cs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Envelop Encryption</title>
      <link>https://khanh1998.github.io/posts/envelop-encryption/</link>
      <pubDate>Fri, 11 Apr 2025 20:56:56 +0700</pubDate>
      <guid>https://khanh1998.github.io/posts/envelop-encryption/</guid>
      <description>&lt;p&gt;To secure storing sensitive information, a common approach is to use &lt;strong&gt;envelope encryption&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;master key&lt;/strong&gt; (usually managed by a secure KMS)&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;row-level key&lt;/strong&gt; (used to encrypt individual records)&lt;/li&gt;
&lt;li&gt;Each row of sensitive data (e.g., credit card information) is encrypted using a unique row key, the row key itself is encrypted using the master key and stored alongside the data in the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This setup allows secure key rotation, better isolation, and compliance with security standards.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why would sometimes 0.1 &#43; 0.2 equals to 0.3, but sometimes it’s not in Go</title>
      <link>https://khanh1998.github.io/posts/go-untyped-constant/</link>
      <pubDate>Sun, 10 Sep 2023 13:57:02 +0700</pubDate>
      <guid>https://khanh1998.github.io/posts/go-untyped-constant/</guid>
      <description>&lt;p&gt;You may have heard about &lt;em&gt;0.1 + 0.2 != 0.3&lt;/em&gt; already, it’s a common issue in most programming languages. The reason behind that is the floating point (IEEE 754) as the computer can’t represent exactly a decimal in binary. By utilizing the floating point, the computer can hold a very large decimal, but the trade-off is it now can only represent the approximate of the true value.&lt;/p&gt;
&lt;p&gt;However, in this post, I will not explain how floating point works but something else – &lt;a href=&#34;https://go.dev/blog/constants&#34;&gt;constant&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Note About Rust Smart Pointer and Deref</title>
      <link>https://khanh1998.github.io/posts/a-note-about-rust-smart-pointer-and-deref/</link>
      <pubDate>Sun, 11 Dec 2022 13:33:55 +0700</pubDate>
      <guid>https://khanh1998.github.io/posts/a-note-about-rust-smart-pointer-and-deref/</guid>
      <description>&lt;p&gt;this article assumes you have some basic knowledge about &lt;a href=&#34;https://doc.rust-lang.org/book/ch15-00-smart-pointers.html&#34;&gt;Rust smart pointers&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-dereference--operator&#34;&gt;the dereference (*) operator&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;dereference&lt;/em&gt; operator &lt;code&gt;*&lt;/code&gt; is used for getting the actual value from a reference:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-1&#34;&gt;1&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-2&#34;&gt;2&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-3&#34;&gt;3&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;kp&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;assert_eq!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;in the above example, &lt;code&gt;b&lt;/code&gt; is a reference to &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;*b&lt;/code&gt; will return the value that &lt;code&gt;b&lt;/code&gt; pointing to.&lt;/p&gt;
&lt;h2 id=&#34;the-smart-pointers&#34;&gt;the smart pointers&lt;/h2&gt;
&lt;h3 id=&#34;boxt&#34;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;here is an example of how you can init and modify the value of a Box&lt;!-- raw HTML omitted --&gt;:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
